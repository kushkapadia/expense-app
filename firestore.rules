rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;`
    }
    
    function isGroupMember(groupId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/expenseGroups/$(groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/expenseGroups/$(groupId)).data.memberIds;
    }
    
    // Wallets - users can only access their own wallets
    match /wallets/{walletId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // Transactions - users can only access their own transactions
    match /transactions/{transactionId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // Budgets - users can only access their own budgets
    match /budgets/{budgetId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // Presets - users can only access their own presets
    match /presets/{presetId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // Incomes - users can only access their own incomes
    match /incomes/{incomeId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // Investment Locks - users can only access their own investment locks
    match /investmentLocks/{lockId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // Wallet History - users can only access their own wallet history
    match /walletHistory/{historyId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // Expense Groups - group members can read, anyone can read by invitation code, only owner can modify
    match /expenseGroups/{groupId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.ownerId &&
        request.auth.uid in request.resource.data.memberIds;
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.ownerId || 
         // Allow adding new members to the group (including the user joining)
         (request.auth.uid in request.resource.data.memberIds && 
          request.auth.uid in resource.data.memberIds) ||
         // Allow non-members to join (add themselves to the group)
         (request.auth.uid in request.resource.data.memberIds && 
          !(request.auth.uid in resource.data.memberIds)));
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }
    
    // Group Invitations - anyone can read by invitation code, only group members can create
    match /groupInvitations/{invitationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/expenseGroups/$(request.resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/expenseGroups/$(request.resource.data.groupId)).data.memberIds;
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.invitedBy ||
         request.auth.uid == resource.data.invitedUserId);
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.invitedBy;
    }
    
    // Group Expenses - group members can read, any group member can create
    match /groupExpenses/{expenseId} {
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/expenseGroups/$(resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/expenseGroups/$(resource.data.groupId)).data.memberIds;
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/expenseGroups/$(request.resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/expenseGroups/$(request.resource.data.groupId)).data.memberIds &&
        request.auth.uid == request.resource.data.paidBy;
      allow update: if isAuthenticated() && 
        exists(/databases/$(database)/documents/expenseGroups/$(resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/expenseGroups/$(resource.data.groupId)).data.memberIds;
      allow delete: if isAuthenticated() && 
        exists(/databases/$(database)/documents/expenseGroups/$(resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/expenseGroups/$(resource.data.groupId)).data.memberIds &&
        request.auth.uid == resource.data.paidBy;
    }
    
    // Group Settlements - simplified rules for now
    match /groupSettlements/{settlementId} {
      allow read, write: if isAuthenticated();
    }
    
    // User Names - users can read any name, but only update their own
    match /userNames/{userId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
  }
}